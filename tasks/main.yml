- name: get choco version
  win_command: choco
  register: choco_out
  failed_when: no
  changed_when: no

- name: upgrade choco if it's older than v0.9.10
  win_command: choco upgrade -y chocolatey
  when: (choco_out.stdout_lines|map('regex_search','^Chocolatey v\d+(\.\d+)+$')|select('string')|list)[0].split()[1]|version_compare('v0.9.10', '<')

- name: install packages
  win_chocolatey: name={{ item }} state=latest
  with_items:
    - tigervnc
  tags: choco

- name: register and start tigervnc
  win_service:
    name: TigerVNC
    display_name: TigerVNC Server
    description: Provides remote access to this machine via the VNC/RFB protocol.
    start_mode: auto
    state: started
    path: '"%PROGRAMFILES%\TigerVNC\winvnc4.exe" -service'
    
- name: set password
  win_regedit:
    path: HKLM:\SOFTWARE\TigerVNC\WinVNC4
    name: "{{ item.name }}"
    data: "{{ item.data }}"
    type: "{{ item.type }}"
  with_items:
    - { name: "Password", data: "hex:{{ tigervnc_password|vnc_encrypt }}", type: "binary"}
    - { name: "SecurityTypes", data: "VeNCrypt,TLSVnc,VncAuth", type: "string"}
    - { name: "QueryConnect", data: "00000000", type: "dword"}
    - { name: "QueryOnlyIfLoggedOn", data: "00000000", type: "dword"}
  tags: reg
  
- name: Allow connections on 5900 and 5800
  win_firewall_rule:
    name: "{{ item.name }}"
    localport: "{{ item.port }}"
    action: allow
    direction: in
    protocol: tcp
    state: present
    enabled: yes
  with_items:
    - { name: VNC, port: 5900 }
    - { name: VNC web, port: 5800 }
  tags: fw

- name: verify VNC port is accessible
  wait_for:
     host: "{{ ansible_host }}"
     port: 5900
     delay: 10
  delegate_to: localhost
  tags: test
  become: no
